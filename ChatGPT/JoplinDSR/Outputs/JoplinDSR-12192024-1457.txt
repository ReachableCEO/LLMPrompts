#!/bin/bash
# Copyright (C) 2025 ReachableCEO Enterprises LLC
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail
trap "echo -e '\033[31mAn error occurred. Exiting.\033[0m'; exit 1" ERR

LOG_FILE="LOG-JoplinDSR-MMDDYYYY-HHMM.log"

# Function to log messages with timestamp and color
echo_log() {
    local message="$1"
    local color="$2"
    local timestamp
    timestamp=$(date "+%m-%d-%Y:%H:%M")
    echo -e "${color}[${timestamp}] ${message}\033[0m" | tee -a "${LOG_FILE}"
}

echo_log "Script started." "\033[32m"

# Skeleton for get_joplin_apikey
function get_joplin_apikey()

{

    export JOPLIN_TOKEN=""
    # Add secrets management code here

}

# Load external environment file
ENV_FILE=""
if [[ -z "${ENV_FILE}" ]]; then
    echo_log "Environment file variable is empty. Please specify the file path." "\033[31m"
    exit 1
fi

if [[ ! -f "${ENV_FILE}" ]]; then
    echo_log "Environment file does not exist: ${ENV_FILE}" "\033[31m"
    exit 1
fi

source "${ENV_FILE}"

# Validate required environment variables
REQUIRED_VARS=("JOPLIN_HOST" "JOPLIN_PORT" "JOPLIN_SOURCE_NOTE_TITLE" "JOPLIN_TARGET_NOTEBOOK" "JOPLIN_TOKEN")
for var in "${REQUIRED_VARS[@]}"; do
    if [[ -z "${!var:-}" ]]; then
        echo_log "Required environment variable ${var} is missing or empty." "\033[31m"
        exit 1
    fi
done

echo_log "All required environment variables are set." "\033[32m"

# Function to fetch Joplin note ID by title
function get_note_id_by_title()

{

    local title="$1"
    local host="$2"
    local port="$3"
    local token="$4"

    local page=1
    local found_id=""

    while :; do
        response=$(curl -s --fail "http://${host}:${port}/notes?token=${token}&page=${page}" || echo "")
        if [[ -z "${response}" || "${response}" == "[]" ]]; then
            break
        fi

        found_id=$(echo "${response}" | jq -r --arg title "${title}" '.items[] | select(.title == $title) | .id')
        if [[ -n "${found_id}" ]]; then
            break
        fi

        ((page++))
    done

    echo "${found_id}"
}

# Clone note function
function clone_note()

{

    local source_note_id="$1"
    local target_notebook="$2"
    local host="$3"
    local port="$4"
    local token="$5"
    local new_note_title="DSR-$(date "+%m-%d-%Y")"

    # Fetch the source note content
    source_content=$(curl -s --fail "http://${host}:${port}/notes/${source_note_id}?token=${token}" | jq -r '.body')
    if [[ -z "${source_content}" ]]; then
        echo_log "Failed to fetch the source note content." "\033[31m"
        exit 1
    fi

    # Create the new note
    curl -s --fail -X POST "http://${host}:${port}/notes?token=${token}"         -H "Content-Type: application/json"         -d "{"title": "${new_note_title}", "body": "${source_content}", "parent_id": "${target_notebook}"}"

    echo_log "New note created: ${new_note_title}" "\033[32m"
}

# Main execution
get_joplin_apikey
note_id=$(get_note_id_by_title "${JOPLIN_SOURCE_NOTE_TITLE}" "${JOPLIN_HOST}" "${JOPLIN_PORT}" "${JOPLIN_TOKEN}")
if [[ -z "${note_id}" ]]; then
    echo_log "Failed to find note ID for title: ${JOPLIN_SOURCE_NOTE_TITLE}" "\033[31m"
    exit 1
fi

clone_note "${note_id}" "${JOPLIN_TARGET_NOTEBOOK}" "${JOPLIN_HOST}" "${JOPLIN_PORT}" "${JOPLIN_TOKEN}"

echo_log "Script completed successfully." "\033[32m"
