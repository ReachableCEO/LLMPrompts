#!/bin/bash

# Copyright (C) 2025 ReachableCEO Enterprises LLC
# License: AGPL v3.0

set -euo pipefail
trap 'echo -e "\e[31mError occurred at line $LINENO\e[0m"; exit 1;' ERR

LOG_FILE="LOG-GPTScript.log"
exec > >(tee -a "$LOG_FILE") 2>&1

function log_message()

{

    local message_type="$1"
    local message="$2"
    local timestamp
    timestamp=$(date +"%m-%d-%Y:%H%M")
    if [[ "$message_type" == "ERROR" ]]; then
        echo -e "\e[31m[$timestamp] $message\e[0m" | tee -a "$LOG_FILE"
    else
        echo -e "\e[32m[$timestamp] $message\e[0m" | tee -a "$LOG_FILE"
    fi
}

log_message "INFO" "Starting script."

function read_env_variables()

{

    log_message "INFO" "Reading environment variables."
    local env_file="env_file"
    if [[ ! -f "$env_file" ]]; then
        log_message "ERROR" "Environment file not found."
        exit 1
    fi
    source "$env_file"

    : "${JOPLIN_HOST:?Missing JOPLIN_HOST}"
    : "${JOPLIN_PORT:?Missing JOPLIN_PORT}"
    : "${JOPLIN_TOKEN:?Missing JOPLIN_TOKEN}"
    : "${JOPLIN_SOURCE_NOTE_TITLE:?Missing JOPLIN_SOURCE_NOTE_TITLE}"
    : "${JOPLIN_TARGET_NOTEBOOK:?Missing JOPLIN_TARGET_NOTEBOOK}"

    log_message "INFO" "Environment variables loaded successfully."
}

function find_note_id()

{

    log_message "INFO" "Finding note ID for source note title: $JOPLIN_SOURCE_NOTE_TITLE."
    local page=1
    local note_id=""

    while :; do
        response=$(curl -s -X GET             "http://${JOPLIN_HOST}:${JOPLIN_PORT}/notes?token=${JOPLIN_TOKEN}&page=$page")

        if [[ -z "$response" ]]; then
            log_message "ERROR" "Failed to fetch notes from Joplin API."
            exit 1
        fi

        note_id=$(echo "$response" | jq -r             --arg title "$JOPLIN_SOURCE_NOTE_TITLE" '.items[] | select(.title == $title) | .id')

        if [[ -n "$note_id" ]]; then
            log_message "INFO" "Found note ID: $note_id."
            break
        fi

        if [[ "$(echo "$response" | jq '.has_more')" == "false" ]]; then
            log_message "ERROR" "Source note not found."
            exit 1
        fi

        page=$((page + 1))
    done

    echo "$note_id"
}

function clone_note()

{

    local source_note_id="$1"
    log_message "INFO" "Cloning note with ID: $source_note_id."
    local target_note_title="DSR-$(date +'%m-%d-%Y')"

    response=$(curl -s -X POST         "http://${JOPLIN_HOST}:${JOPLIN_PORT}/notes?token=${JOPLIN_TOKEN}"         -H "Content-Type: application/json"         -d @<(jq -n --arg title "$target_note_title"             --arg body "$(curl -s "http://${JOPLIN_HOST}:${JOPLIN_PORT}/notes/$source_note_id?token=${JOPLIN_TOKEN}" | jq -r '.body')"             --arg notebook "$JOPLIN_TARGET_NOTEBOOK"             '{ title: $title, body: $body, parent_id: $notebook }'))

    if [[ -z "$response" ]]; then
        log_message "ERROR" "Failed to clone note."
        exit 1
    fi

    log_message "INFO" "Note cloned successfully."
}

read_env_variables
source_note_id=$(find_note_id)
clone_note "$source_note_id"

log_message "INFO" "Script completed successfully."
